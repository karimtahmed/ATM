package parallel;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import static java.lang.Integer.parseInt;
import java.net.ServerSocket;
import java.net.Socket;
public class server extends javax.swing.JFrame {

    /**
     * Creates new form server1
     */
    public server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new server().setVisible(true);
            }
        });

        int balance1 = 5000;
        int balance2 = 5000;
        int balance3 = 5000;
              //create a serverSocket object that handles the port number for the application InputStreamReader
              //any port number would do fine as long as it&#039;s used same port number at the clientServer side 
              ServerSocket s = new ServerSocket(9991); 
              Socket ss = s.accept(); //to accept the connection between server &amp; client
              jTextArea1.append("Connected client1\n");
              ServerSocket s2 = new ServerSocket(9992); 
              Socket ss2 = s2.accept();
              jTextArea1.append("Connected client2\n");
              ServerSocket s3 = new ServerSocket(9993); 
              Socket ss3 = s3.accept();
              jTextArea1.append("Connected client3\n");
              //while loop is being used to keep connection alive between server &amp; client //TCP connection orianted
              DataInputStream in = new DataInputStream(ss.getInputStream()); 
              DataInputStream in2 = new DataInputStream(ss2.getInputStream()); 
              DataInputStream in3 = new DataInputStream(ss3.getInputStream()); 
              DataOutputStream outToServer = new DataOutputStream(ss.getOutputStream());
              DataOutputStream outToServer2 = new DataOutputStream(ss2.getOutputStream());
              DataOutputStream outToServer3 = new DataOutputStream(ss3.getOutputStream());
              //buffer object is used to hold the data output from the client side 
              
              while(true) { 
                  String username = in.readUTF(); 
                  String password = in.readUTF();    
                  jTextArea1.append("client1:" + username+"\n");
                  jTextArea1.append("client1:" + password+"\n");
                  //
                  if ("karim".equals(username) && "2018".equals(password) )
                  {
                    outToServer.writeUTF("Login client1");
                                        String choice1 = in.readUTF();
                     int choice = parseInt(choice1);
                    
                     switch (choice) {
                case 1:
                     outToServer.writeUTF("1");
                    String withdraw1 = in.readUTF();
                    int withdraw = parseInt(withdraw1);
                    jTextArea1.append("client1:" + withdraw+"\n");
                    if( balance1 > withdraw && withdraw<7000)
                    {
                        //remove the withdrawl amount from the total balance
                        balance1 -= withdraw ;
                        outToServer.writeUTF("Please collect your money");
                        
                    }
                    else
                    {
                        //show custom error message
                        outToServer.writeUTF("Insufficient Balance");
                        
                    }    
                    break;
                case 2:
                     outToServer.writeUTF("2");
                    String deposit1 = in.readUTF();
                    int deposit = parseInt(deposit1);
                    jTextArea1.append("client1:" + deposit+"\n");                
                        //remove the withdrawl amount from the total balance
                        balance1 += deposit;
                        outToServer.writeUTF("Your Money has been successfully depsited");
    
                    break;
                case 4:
                     outToServer.writeUTF("4");
                    String accn = in.readUTF();
                    String value = in.readUTF();
                    int x=parseInt(value);
                    if(("2".equals(accn)) && x<=balance1 ){
                        balance1=balance1-x;
                        balance2=balance2+x;
                        outToServer.writeUTF("your balance have became "+balance1);
                        jTextArea1.append("client 2 balance have became "+balance2+"\n");
                        
                    }
                    else if(("3".equals(accn))&& x<=balance1){
                        balance1=balance1-x;
                        balance3=balance3+x;
                        outToServer.writeUTF("your balance have became "+balance1);
                        jTextArea1.append("client 3 balance have became"+balance3+"\n");
                        

                    }
                    else if(x>balance1){
                        outToServer.writeUTF("your balance is unsufficient ");
                    }
                    outToServer.writeUTF("transmission ended");
                        //remove the withdrawl amount from the total balance
    
                    break;
                
  
              }
                  }
                  else
                  {
                      outToServer.writeUTF("Login client1 failed");
                  }
                  //
                  if (username.equalsIgnoreCase("exist"))
                  {
                      break;
                  }
                  String username2 = in2.readUTF(); 
                  String password2 = in2.readUTF();
                  jTextArea1.append("client2:" + username2+"\n");
                  jTextArea1.append("client2:" + password2+"\n");
                  if ("joya".equals(username2) && "2019".equals(password2) )
                  {
                    outToServer2.writeUTF("Login client2");
                    
                                         String choice2 = in2.readUTF();
                   // System.out.println("client1:" + choice1);
                     int choice3 = parseInt(choice2);
                    
                     switch (choice3) {
                case 1:
                     outToServer2.writeUTF("1");
                    String withdraw1 = in2.readUTF();
                    int withdraw = parseInt(withdraw1);
                    jTextArea1.append("client2:" + withdraw+"\n");
                    if( balance2 > withdraw && withdraw<7000)
                    {
                        //remove the withdrawl amount from the total balance
                        balance2 -= withdraw ;
                        outToServer2.writeUTF("Please collect your money");
                        
                    }
                    else
                    {
                        //show custom error message
                        outToServer2.writeUTF("Insufficient Balance");
                        
                    }    
                    break;
                case 2:
                     outToServer2.writeUTF("2");
                    String deposit1 = in2.readUTF();
                    int deposit = parseInt(deposit1);
                    jTextArea1.append("client2:" + deposit+"\n");                
                        //remove the withdrawl amount from the total balance
                        balance2 += deposit;
                        outToServer2.writeUTF("Your Money has been successfully depsited");
    
                    break;
              }
           
                  }
                  else
                  {
                      outToServer2.writeUTF("Login client2 failed");
                  }
                  //
                  if (username2.equalsIgnoreCase("exist"))
                  {
                      break;
                  }
                  String username3 = in3.readUTF(); 
                  String password3 = in3.readUTF();
                  jTextArea1.append("client3:" + username3+"\n");
                  jTextArea1.append("client3:" + password3+"\n");
                  if ("remo".equals(username3) && "2020".equals(password3) )
                  {
                    outToServer3.writeUTF("Login client3");
                    
                              String choice4 = in3.readUTF();
                   // System.out.println("client1:" + choice1);
                     int choice5 = parseInt(choice4);
                    
                     switch (choice5) {
                case 1:
                     outToServer3.writeUTF("1");
                    String withdraw1 = in3.readUTF();
                    int withdraw = parseInt(withdraw1);
                    jTextArea1.append("client3:" + withdraw+"\n");
                    if( balance3 > withdraw && withdraw <7000)
                    {
                        //remove the withdrawl amount from the total balance
                        balance3 -= withdraw ;
                        outToServer3.writeUTF("Please collect your money");
                        
                    }
                    else
                    {
                        //show custom error message
                        outToServer3.writeUTF("Insufficient Balance");
                        
                    }    
                    break;
                case 2:
                     outToServer3.writeUTF("2");
                    String deposit1 = in3.readUTF();
                    int deposit = parseInt(deposit1);
                    jTextArea1.append("client2:" + deposit+"\n");                
                        //remove the withdrawl amount from the total balance
                        balance3 += deposit;
                        outToServer3.writeUTF("Your Money has been successfully depsited");
    
                    break;
                     }
                  }
                  else
                  {
                      outToServer3.writeUTF("Login client3 failed");
                  }
                  //
                  if (username3.equalsIgnoreCase("exist"))
                  {
                      break;
                  }

                  break;
              } 
              ss.close();
              ss2.close();
              ss3.close();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
